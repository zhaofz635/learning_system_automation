import { axios } from "@pipedream/platform"

export default defineComponent({
  props: {
    github: {
      type: "app",
      app: "github",
    },
  },
  async run({ steps, $ }) {
    // 1. 定义常量
    const REPO_OWNER = "zhaofz635";
    const REPO_NAME = "learning_system_automation";
    const WORKFLOW_FILE = "run-analysis.yml"; // 精确匹配您的YAML文件名
    const BRANCH = "main";

    // 2. 验证输入数据
    const requiredParams = ['student_id', 'score', 'cognitive_load'];
    const missingParams = requiredParams.filter(param => !steps.trigger.event.body?.[param]);
    
    if (missingParams.length > 0) {
      throw new Error(`缺少必要参数: ${missingParams.join(', ')}`);
    }

    // 3. 准备输入数据
    const inputs = {
      student_id: steps.trigger.event.body.student_id.toString(),
      score: parseFloat(steps.trigger.event.body.score).toFixed(1),
      cognitive_load: Array.isArray(steps.trigger.event.body.cognitive_load) 
        ? steps.trigger.event.body.cognitive_load.join(",") 
        : steps.trigger.event.body.cognitive_load.toString()
    };

    // 4. 构建API URL
    const apiUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/workflows/${WORKFLOW_FILE}/dispatches`;

    try {
      // 5. 触发工作流
      const response = await axios($, {
        method: "POST",
        url: apiUrl,
        headers: {
          Authorization: `Bearer ${this.github.$auth.oauth_access_token}`,
          Accept: "application/vnd.github.v3+json",
          "Content-Type": "application/json",
          "X-GitHub-Api-Version": "2022-11-28" // 明确指定API版本
        },
        data: {
          ref: BRANCH,
          inputs: inputs
        }
      });

      // 6. 返回成功响应
      return {
        success: true,
        message: "工作流触发成功",
        details: {
          workflow: WORKFLOW_FILE,
          repository: `${REPO_OWNER}/${REPO_NAME}`,
          branch: BRANCH,
          inputs: inputs,
          status_code: response.status
        }
      };
    } catch (error) {
      // 7. 增强的错误处理
      console.error("完整错误详情:", {
        request_config: error.config,
        response_status: error.response?.status,
        response_data: error.response?.data,
        workflow_file: WORKFLOW_FILE
      });

      // 8. 检查工作流是否存在
      if (error.response?.status === 404) {
        const workflowsRes = await axios($, {
          method: "GET",
          url: `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/workflows`,
          headers: {
            Authorization: `Bearer ${this.github.$auth.oauth_access_token}`
          }
        });
        const availableWorkflows = workflowsRes.data.workflows.map(w => w.name);
        throw new Error(`工作流未找到。可用工作流: ${availableWorkflows.join(', ')}`);
      }

      throw new Error(`触发失败: ${error.response?.data?.message || error.message}`);
    }
  },
})
