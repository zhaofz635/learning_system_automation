name: Textbook Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      student_id:
        description: '学生ID (如 test001)'
        required: true
        type: string
      score:
        description: '测试成绩 (0-5分)'
        required: true
        type: string
      cognitive_load:
        description: '认知负荷评分 (1-5分，逗号分隔)'
        required: true
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置 Python 环境
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 3. 配置 NLTK 环境变量（关键：早于所有 Python 步骤）
      - name: Configure NLTK_DATA environment
        run: |
          echo "NLTK_DATA=/tmp/nltk_data" >> $GITHUB_ENV
          mkdir -p /tmp/nltk_data

      # 4. 安装依赖并下载 NLTK 数据
      - name: Install dependencies and download NLTK data
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nltk

          python -c "
          import nltk
          print('📥 Downloading NLTK book collection...')
          nltk.download('book', download_dir='/tmp/nltk_data', quiet=False)
          print('✅ NLTK data downloaded to /tmp/nltk_data')
          "

      # 5. 验证 tokenization 是否可用
      - name: Validate NLTK setup
        run: |
          python -c "
          import nltk
          tokens = nltk.word_tokenize('Hello, world!')
          print(f'✅ Success: {tokens}')
          "

      # 6. 准备输入数据
      - name: Prepare input files
        run: |
          echo '{
            "student_id": "${{ inputs.student_id }}",
            "score": ${{ inputs.score }},
            "cognitive_load": [${{ inputs.cognitive_load }}]
          }' > input_data.json
          cat input_data.json

      # 7. 运行分析脚本（确保环境变量传递）
      - name: Run analysis script
        env:
          Access_Key_Secret: ${{ secrets.Access_Key_Secret }}
          NLTK_DATA: ${{ env.NLTK_DATA }}  # ✅ 显式传递环境变量
        run: |
          set -e  # 🔥 失败立即退出，便于调试
          echo "🔍 Current NLTK data paths:"
          python -c "import nltk; print(nltk.data.path)"

          # ✅ 关键：在运行前再次验证
          python -c "
          import nltk
          try:
              print(nltk.word_tokenize('Test sentence.'))
          except Exception as e:
              print('❌ Tokenization failed in script context:')
              print(e)
              exit(1)
          "

          python textbook_difficulty_system.py \
            --cognitive_load input_data.json \
            --scores input_data.json \
            --textbook textbook.json \
            --output results.json

          cat results.json

      # 8. 提交结果
      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add results.json input_data.json
          git commit -m "Auto: Results for ${{ inputs.student_id }}" || echo "No changes to commit"
          git push

      # 9. 上传到 Google Drive
      - name: Upload to Google Drive
        if: success()
        env:
          GAS_SCRIPT_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: |
          curl -X POST "$GAS_SCRIPT_URL" \
            -H "Content-Type: application/json" \
            --data-binary @results.json

      # 10. 完成通知
      - name: Notify completion
        if: always()
        run: |
          echo "✅ Analysis completed for ${{ inputs.student_id }}"
          echo "📌 Results: https://github.com/zhaofz635/learning_system_automation/blob/main/results.json"
