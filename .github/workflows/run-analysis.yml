name: Textbook Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      student_id:
        description: '学生ID (如 test001)'
        required: true
        type: string
      score:
        description: '测试成绩 (0-100分)'
        required: true
        type: string
      cognitive_load:
        description: '认知负荷评分 (1-5分，逗号分隔，8个值)'
        required: true
        type: string
      user_feedback:
        description: '学生反馈 (如"我觉得太难")'
        required: false
        type: string
        default: ''

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    container:
      image: ghcr.io/zhaofz635/learning_system_automation:textbook-pipeline
    env:
      NLTK_DATA: /app/nltk_data  # 与 Dockerfile WORKDIR /app 一致

    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 准备输入数据
      - name: Prepare input files
        run: |
          cognitive_load_array=$(echo "${{ inputs.cognitive_load }}" | tr ',' ' ')
          cat > /app/input_data.json <<EOF
          [
            {
              "student_id": "${{ inputs.student_id }}",
              "score": ${{ inputs.score }},
              "cognitive_load": [${cognitive_load_array// /,}],
              "user_feedback": "${{ inputs.user_feedback }}"
            }
          ]
          EOF
          echo "输入文件内容:"
          jq . /app/input_data.json || cat /app/input_data.json

      # 3. 运行分析脚本
      - name: Run analysis
        env:
          ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
          NLTK_DATA: /app/nltk_data
        run: |
          # 环境验证
          python3.9 -c "
          import sys, numpy as np, cv2, requests, xgboost, sklearn, skimage, pandas, scipy, nltk
          print(f'Python: {sys.version}')
          print(f'NumPy: {np.__version__}')
          print(f'OpenCV: {cv2.__version__}')
          print(f'Requests: {requests.__version__}')
          print(f'XGBoost: {xgboost.__version__}')
          print(f'Scikit-Learn: {sklearn.__version__}')
          print(f'Scikit-Image: {skimage.__version__}')
          print(f'Pandas: {pandas.__version__}')
          print(f'SciPy: {scipy.__version__}')
          print(f'NLTK: {nltk.__version__}')
          "
          
          # 带重试的运行机制
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "尝试第 $attempt 次运行..."
            python3.9 /app/textbook_difficulty_system.py \
              --cognitive_load /app/input_data.json \
              --scores /app/input_data.json \
              --textbook /app/textbook.json \
              --output /app/results.json && break
            attempt=$((attempt + 1))
            sleep 5
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ 运行失败，已达最大尝试次数"
            exit 1
          fi
          
          echo "分析结果:"
          jq . /app/results.json || cat /app/results.json

      # 4. 提交结果
      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add /app/results.json
          git commit -m "Auto: Results for ${{ inputs.student_id }} [skip ci]" || echo "无变更可提交"
          git pull --rebase origin main
          remote_repo="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git push "${remote_repo}" HEAD:main || exit 0

      # 5. 上传到 Google Sheets
      - name: Upload to Google Sheets
        continue-on-error: true
        env:
          GAS_SCRIPT_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: |
          curl --fail --show-error --retry 3 \
            -X POST "$GAS_SCRIPT_URL" \
            -H "Content-Type: application/json" \
            --data-binary @/app/results.json

      # 6. 最终状态通知
      - name: Notify status
        if: always()
        run: |
          echo "工作流状态: ${{ job.status }}"
          echo "结果文件: https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_REF/results.json"
          echo "详细日志: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
