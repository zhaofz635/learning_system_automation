name: Textbook Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      student_id:
        description: '学生ID (如 test001)'
        required: true
        type: string
      score:
        description: '测试成绩 (0-100分)'
        required: true
        type: string
      cognitive_load:
        description: '认知负荷评分 (1-5分，逗号分隔，8个值)'
        required: true
        type: string
      user_feedback:
        description: '学生反馈 (如"我觉得太难")'
        required: false
        type: string
        default: ''

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      NLTK_DATA: /app/nltk_data

    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 登录 GHCR（私有镜像）
      - name: Log in to GHCR
        run: echo "${{ secrets.DOCKER_PAT }}" | docker login ghcr.io -u zhaofz635 --password-stdin
        env:
          DOCKER_PAT: ${{ secrets.DOCKER_PAT }}

      # 3. 拉取镜像
      - name: Pull Docker image
        run: docker pull ghcr.io/zhaofz635/learning_system_automation:textbook-pipeline

      # 4. 准备输入数据
      - name: Prepare input files
        run: |
          cognitive_load_array=$(echo "${{ inputs.cognitive_load }}" | tr ',' ' ')
          cat > input_data.json <<EOF
          [
            {
              "student_id": "${{ inputs.student_id }}",
              "score": ${{ inputs.score }},
              "cognitive_load": [${cognitive_load_array// /,}],
              "user_feedback": "${{ inputs.user_feedback }}"
            }
          ]
          EOF
          echo "输入文件内容:"
          jq . input_data.json || cat input_data.json

      # 5. 运行分析脚本（容器内执行）
      - name: Run analysis inside Docker
        env:
          ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
          NLTK_DATA: /app/nltk_data
        run: |
          docker run --rm -v $PWD:/app ghcr.io/zhaofz635/learning_system_automation:textbook-pipeline \
            python3.9 /app/textbook_difficulty_system.py \
              --cognitive_load /app/input_data.json \
              --scores /app/input_data.json \
              --textbook /app/textbook.json \
              --output /app/results.json

      # 6. 提交结果
      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add results.json
          git commit -m "Auto: Results for ${{ inputs.student_id }} [skip ci]" || echo "无变更可提交"
          git pull --rebase origin main
          remote_repo="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git push "${remote_repo}" HEAD:main || exit 0

      # 7. 上传到 Google Sheets
      - name: Upload to Google Sheets
        continue-on-error: true
        env:
          GAS_SCRIPT_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: |
          curl --fail --show-error --retry 3 \
            -X POST "$GAS_SCRIPT_URL" \
            -H "Content-Type: application/json" \
            --data-binary @results.json

      # 8. 最终状态通知
      - name: Notify status
        if: always()
        run: |
          echo "工作流状态: ${{ job.status }}"
          echo "结果文件: https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_REF/results.json"
          echo "详细日志: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
