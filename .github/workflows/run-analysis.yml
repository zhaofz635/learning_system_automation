name: Textbook Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      student_id:
        description: '学生ID (如 test001)'
        required: true
        type: string
      score:
        description: '测试成绩 (0-5分)'
        required: true
        type: string
      cognitive_load:
        description: '认知负荷评分 (1-5分，逗号分隔)'
        required: true
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      NLTK_DATA: /tmp/nltk_data  # 设置全局 NLTK_DATA 目录

    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置 Python 环境
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 3. 安装依赖并配置 NLTK
      - name: Install dependencies and setup NLTK
        run: |
          python -m pip install --upgrade pip
          pip install nltk
      
          python -c "import nltk; print('✅ nltk version:', nltk.__version__)"
      
          # 创建目录
          mkdir -p /tmp/nltk_data
      
          # 下载 punkt 和 punkt_tab
          python -c "
          import nltk
          nltk.download('punkt', download_dir='/tmp/nltk_data', quiet=True)
          nltk.download('punkt_tab', download_dir='/tmp/nltk_data', quiet=True)
          " || { echo '❌ Failed to download nltk resources'; exit 1; }
      
          # 验证目录内容
          echo '🔍 Checking /tmp/nltk_data/tokenizers:'
          find /tmp/nltk_data -type f -name "*.pickle" -o -name "*.zip" | grep -i punkt | head -10
      
          # 测试分词（确保路径已添加）
          python -c "
          import nltk
          nltk.data.path.append('/tmp/nltk_data')
          tokens = nltk.word_tokenize('Hello world. How are you?')
          print(f'✅ Tokenization successful: {tokens}')
          " || { echo '❌ nltk setup failed'; exit 1; }
      
          # 设置环境变量
          echo "NLTK_DATA=/tmp/nltk_data" >> $GITHUB_ENV
            # 4. 准备输入数据
            - name: Prepare input files
              run: |
                echo '{
                  "student_id": "${{ inputs.student_id }}",
                  "score": ${{ inputs.score }},
                  "cognitive_load": [${{ inputs.cognitive_load }}]
                }' > input_data.json
      
                echo "📄 Generated input_data.json:"
                cat input_data.json

      # 5. 运行分析脚本
      - name: Run analysis script
        env:
          Access_Key_Secret: ${{ secrets.Access_Key_Secret }}
          NLTK_DATA: /tmp/nltk_data
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: |
          which python
          python -c "
          import nltk
          nltk.data.path.append('/tmp/nltk_data')
          print('✅ Running nltk version:', nltk.__version__)
          print('NLTK data paths:', nltk.data.path)
          " || { echo "❌ nltk not available at runtime"; exit 1; }

          # 执行主分析脚本
          python textbook_difficulty_system.py \
            --cognitive_load input_data.json \
            --scores input_data.json \
            --textbook textbook.json \
            --output results.json

          # 输出结果
          echo "📊 Analysis results:"
          cat results.json

      # 6. 自动提交结果
      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add results.json
          git add input_data.json  # 可选：记录输入

          git commit -m "Auto-update: Analysis results for ${{ inputs.student_id }}" || echo "➡️ No changes to commit"
          git push

      # 7. 上传到 Google Apps Script (Google Drive)
      - name: Upload to Google Drive
        if: success()
        env:
          GAS_SCRIPT_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: |
          if [ -f "results.json" ]; then
            curl -X POST "$GAS_SCRIPT_URL" \
              -H "Content-Type: application/json" \
              --data-binary @results.json
            echo "📤 Results uploaded to Google Drive via GAS"
          else
            echo "❌ results.json not found, upload skipped"
            exit 1
          fi

      # 8. 通知完成（始终运行）
      - name: Notify completion
        if: always()
        run: |
          echo "✅ Analysis completed for student ${{ inputs.student_id }}"
          echo "📌 View results: https://github.com/zhaofz635/learning_system_automation/blob/main/results.json"
          echo "🕒 Workflow finished at $(date)"
