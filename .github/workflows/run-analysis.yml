name: Textbook Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      student_id:
        description: '学生ID (如 test001)'
        required: true
        type: string
      score:
        description: '测试成绩 (0-100分)'
        required: true
        type: string
      cognitive_load:
        description: '认知负荷评分 (1-5分，逗号分隔，8个值)'
        required: true
        type: string
      user_feedback:
        description: '学生反馈 (如"我觉得太难")'
        required: false
        type: string
        default: ''

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      # 1. 设置 Python 并缓存 pip
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 2. 缓存 pip 包（wheel 和源码）
      - name: Cache pip
        uses: actions/cache@v4
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 3. 安装系统依赖（只安装一次，缓存由系统层处理）
      - name: Install system dependencies
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopencv-dev libgl1 libgtk2.0-dev

      # 4. 安装 Python 包（跳过如果缓存命中）
      - name: Install Python packages
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # 5. 缓存 NLTK 数据
      - name: Cache NLTK Data
        uses: actions/cache@v4
        id: nltk-cache
        with:
          path: ./nltk_data
          key: ${{ runner.os }}-nltk-${{ hashFiles('requirements.txt') }}

      - name: Download NLTK Data
        if: steps.nltk-cache.outputs.cache-hit != 'true'
        run: |
          python -c "
          import nltk, os
          nltk.download('punkt', download_dir='nltk_data', quiet=False)
          nltk.download('punkt_tab', download_dir='nltk_data', quiet=False)
          nltk.download('stopwords', download_dir='nltk_data', quiet=False)
          print('✅ NLTK 资源已下载')
          "
        env:
          NLTK_DATA: ./nltk_data

      # 6. 设置环境变量
      - name: Set NLTK environment
        run: echo "NLTK_DATA=$(pwd)/nltk_data" >> $GITHUB_ENV

      # 7. 准备输入数据
      - name: Prepare input files
        run: |
          cognitive_load_array=$(echo "${{ inputs.cognitive_load }}" | tr ',' ' ')
          cat > input_data.json <<EOF
          [
            {
              "student_id": "${{ inputs.student_id }}",
              "score": ${{ inputs.score }},
              "cognitive_load": [${cognitive_load_array// /,}],
              "user_feedback": "${{ inputs.user_feedback }}"
            }
          ]
          EOF
          jq . input_data.json || cat input_data.json

      # 8. 运行分析脚本
      - name: Run analysis
        env:
          ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
        run: |
          python -c "
          import numpy as np, cv2, requests, xgboost, sklearn, skimage, pandas, scipy, nltk
          print('✅ 所有包导入成功')
          "
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "尝试第 $attempt 次..."
            python textbook_difficulty_system.py \
              --cognitive_load input_data.json \
              --scores input_data.json \
              --textbook textbook.json \
              --output results.json && break
            attempt=$((attempt + 1))
            sleep 5
          done
          [ $attempt -gt $max_attempts ] && exit 1
          jq . results.json || cat results.json

      # 9. 提交结果
      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add results.json
          git commit -m "Auto: Results for ${{ inputs.student_id }} [skip ci]" || echo "无变更"
          git pull --rebase origin main
          git push "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" HEAD:main || true

      # 10. 上传到 Google Sheets
      - name: Upload to Google Sheets
        continue-on-error: true
        env:
          GAS_SCRIPT_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: |
          curl --fail --show-error --retry 3 \
            -X POST "$GAS_SCRIPT_URL" \
            -H "Content-Type: application/json" \
            --data-binary @results.json

      - name: Notify status
        if: always()
        run: |
          echo "工作流状态: ${{ job.status }}"
          echo "结果: https://github.com/${GITHUB_REPOSITORY}/blob/main/results.json"
