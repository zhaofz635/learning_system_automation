name: Textbook Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      student_id:
        description: '学生ID (如 test001)'
        required: true
        type: string
      score:
        description: '测试成绩 (0-100分)'
        required: true
        type: string
      cognitive_load:
        description: '认知负荷评分 (1-5分，逗号分隔，8个值)'
        required: true
        type: string
      user_feedback:
        description: '学生反馈 (如"我觉得太难")'
        required: false
        type: string
        default: ''

jobs:
  analyze:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/zhaofz635/learning_system_automation:textbook-pipeline
      credentials:
        username: zhaofz635
        password: ${{ secrets.CR_PAT }}
      options: "--cpus 2 --memory 4g"
    timeout-minutes: 20
    env:
      NLTK_DATA: /app/nltk_data

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 准备输入数据
        run: |
          cognitive_load_array=$(echo "${{ inputs.cognitive_load }}" | tr ',' ' ')
          cat > input_data.json <<EOF
          [
            {
              "student_id": "${{ inputs.student_id }}",
              "score": ${{ inputs.score }},
              "cognitive_load": [${cognitive_load_array// /,}],
              "user_feedback": "${{ inputs.user_feedback }}"
            }
          ]
          EOF
          echo "输入文件内容:"
          jq . input_data.json || cat input_data.json

      - name: 运行分析
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "尝试第 $attempt 次运行..."
            python textbook_difficulty_system.py \
              --cognitive_load input_data.json \
              --scores input_data.json \
              --textbook textbook.json \
              --output results.json && break
            attempt=$((attempt + 1))
            sleep 5
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ 运行失败"
            exit 1
          fi
          
          echo "分析结果:"
          jq . results.json || cat results.json

      - name: 提交结果
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add results.json
          git commit -m "Auto: Results for ${{ inputs.student_id }} [skip ci]" || echo "无变更可提交"
          git pull --rebase origin main
          remote_repo="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git push "${remote_repo}" HEAD:main || exit 0

      - name: 上传到 Google Sheets
        continue-on-error: true
        env:
          GAS_SCRIPT_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: |
          curl --fail --show-error --retry 3 \
            -X POST "$GAS_SCRIPT_URL" \
            -H "Content-Type: application/json" \
            --data-binary @results.json

      - name: 通知状态
        if: always()
        run: |
          echo "工作流状态: ${{ job.status }}"
          echo "结果文件: https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_REF}/results.json"
          echo "详细日志: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
