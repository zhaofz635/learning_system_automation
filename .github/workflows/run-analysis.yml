name: Textbook Analysis Pipeline

on:
  workflow_dispatch:
    inputs:
      student_id:
        description: '学生ID (如 test001)'
        required: true
        type: string
      score:
        description: '测试成绩 (0-5分)'
        required: true
        type: string
      cognitive_load:
        description: '认知负荷评分 (1-5分，逗号分隔)'
        required: true
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Configure NLTK_DATA
        run: |
          echo "NLTK_DATA=/tmp/nltk_data" >> $GITHUB_ENV
          mkdir -p /tmp/nltk_data

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nltk

      - name: Download NLTK book data
        run: |
          python -c "
          import nltk
          nltk.download('book', download_dir='/tmp/nltk_data', quiet=False)
          "

      - name: Validate NLTK setup
        run: |
          python -c "
          import nltk
          print(nltk.word_tokenize('Hello world.'))
          print('✅ NLTK is working.')
          "

      - name: Prepare input files
        run: |
          echo '{
            "student_id": "${{ inputs.student_id }}",
            "score": ${{ inputs.score }},
            "cognitive_load": [${{ inputs.cognitive_load }}]
          }' > input_data.json
          cat input_data.json

      - name: Run analysis script
        env:
          Access_Key_Secret: ${{ secrets.Access_Key_Secret }}
          MINIMAX_API_KEY: ${{ secrets.MINIMAX_API_KEY }}
        run: |
          python textbook_difficulty_system.py \
            --cognitive_load input_data.json \
            --scores input_data.json \
            --textbook textbook.json \
            --output results.json
          cat results.json

      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add results.json
          git commit -m "Auto: Results for ${{ inputs.student_id }}" || echo "No changes"
          git push

      - name: Upload to Google Drive
        if: success()
        env:
          GAS_SCRIPT_URL: ${{ secrets.GAS_WEBAPP_URL }}
        run: |
          curl -X POST "$GAS_SCRIPT_URL" -H "Content-Type: application/json" --data-binary @results.json

      - name: Notify completion
        if: always()
        run: |
          echo "✅ Completed for ${{ inputs.student_id }}"
